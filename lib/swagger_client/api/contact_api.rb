=begin
#SendX REST API

#**NOTE:** All API calls contain 2 parameters - 'api_key' and 'team_id'. These can be inferred from your settings page 'https://app.sendx.io/setting' under the sections 'Api Key' and 'Team Id' respectively.  For checking language specific Clients: -  [Golang](https://github.com/sendx/sendx-api-go) -  [Python](https://github.com/sendx/sendx-api-python) -  [Ruby](https://github.com/sendx/sendx-api-ruby) -  [Java](https://github.com/sendx/sendx-api-java) -  [PHP](https://github.com/sendx/sendx-api-php) -  [NodeJS](https://github.com/sendx/sendx-api-nodejs)  We also have a [Javascript API](http://help.sendx.io/knowledge_base/topics/javascript-api-1) for client side integrations.  SendX REST API has two methods:    * Identify   * Track    ## Identify API Method    Identify API Method is used to attach data to a visitor. If a contact is not yet created then we will create the contact. In case contact already exists then we update it.    **Example Request:**       ```json      {         email: \"john.doe@gmail.com\",         firstName: \"John\",         lastName: \"Doe\",         birthday: \"1989-03-03\",         customFields: {           \"Designation\": \"Software Engineer\",           \"Age\": \"27\",           \"Experience\": \"5\"         },         tags: [\"Developer\", \"API Team\"],      }   ```         Note that tags are an array of strings. In case they don't exist previously then API will create them and associate them with the contact.      Similarly if a custom field doesn't exist then it is first created and then associated with the contact along-with the corresponding value. In case custom field exists already then we simply update the value of it for the aforementioned contact.      We don't delete any of the properties based on identify call. What this means is that if for the same contact you did two API calls like:         **API Call A**        ```json      {         email: \"john.doe@gmail.com\",         firstName: \"John\",         birthday: \"1989-03-03\",         customFields: {           \"Designation\": \"Software Engineer\"         },         tags: [\"Developer\"],      }   ```         **API Call B**       ```json      {         email: \"john.doe@gmail.com\",         customFields: {           \"Age\": \"29\"         },         tags: [\"API Team\"],      }   ```         Then the final contact will have firstName as **John**, birthday as **1989-03-03** present. Also both tags **Developer** and **API Team** shall be present along with custom fields **Designation** and **Age**.         **Properties:**      * **firstName**: type string   * **lastName**: type string   * **email**: type string     * **newEmail**: type string     * **company**: type string     * **birthday**: type string with format **YYYY-MM-DD** eg: 2016-11-21     * **customFields**: type map[string]string      * **tags**: type array of string       In case email of an already existing contact needs to be updated then specify current email under email property and updated email under newEmail property.          **Response:**       ```json      {         \"status\": \"200\",         \"message\": \"OK\",         \"data\": {           \"encryptedTeamId\": \"CLdh9Ig5GLIN1u8gTRvoja\",           \"encryptedId\": \"c9QF63nrBenCaAXe660byz\",           \"tags\": [             \"API Team\",             \"Tech\"           ],           \"firstName\": \"John\",           \"lastName\": \"Doe\",           \"email\": \"john.doe@gmail.com\",           \"company\": \"\",           \"birthday\": \"1989-03-03\",           \"customFields\": {             \"Age\": \"29\",             \"Designation\": \"Software Engineer\"           }           }        }   ```         ## Track API Method      Track API Method is used to track a contact. In the track API object you can:      * **addTags**:   * **removeTags**:      You can have automation rules based on tag addition as well as tag removal and they will get executed. For eg:      * On **user registration** tag start onboarding drip for him / her.   * **Account Upgrade** tag start add user to paid user list and start account expansion drip.    * On removal of **trial user** tag start upsell trial completed users drip.         **Example Request:**      >     \\_scq.push([\"track\", {        \"addTags\": [\"blogger\", \"female\"]     }]);           >     \\_scq.push([\"track\", {        \"addTags\": [\"paid user\"],        \"removeTags\": [\"trial user\"]     }]);           **Response:**      >      {       \"status\": \"200\",       \"message\": \"OK\",       \"data\": \"success\"      } 

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class ContactApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Identify a contact as user
    # 
    # @param api_key 
    # @param team_id 
    # @param contact_details Contact details
    # @param [Hash] opts the optional parameters
    # @return [ContactResponse]
    def contact_identify_post(api_key, team_id, contact_details, opts = {})
      data, _status_code, _headers = contact_identify_post_with_http_info(api_key, team_id, contact_details, opts)
      return data
    end

    # Identify a contact as user
    # 
    # @param api_key 
    # @param team_id 
    # @param contact_details Contact details
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContactResponse, Fixnum, Hash)>] ContactResponse data, response status code and response headers
    def contact_identify_post_with_http_info(api_key, team_id, contact_details, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactApi.contact_identify_post ..."
      end
      # verify the required parameter 'api_key' is set
      fail ArgumentError, "Missing the required parameter 'api_key' when calling ContactApi.contact_identify_post" if api_key.nil?
      # verify the required parameter 'team_id' is set
      fail ArgumentError, "Missing the required parameter 'team_id' when calling ContactApi.contact_identify_post" if team_id.nil?
      # verify the required parameter 'contact_details' is set
      fail ArgumentError, "Missing the required parameter 'contact_details' when calling ContactApi.contact_identify_post" if contact_details.nil?
      # resource path
      local_var_path = "/contact/identify".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'team_id'] = team_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'api_key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(contact_details)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContactResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactApi#contact_identify_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add tracking info using tags to a contact
    # 
    # @param api_key 
    # @param team_id 
    # @param email 
    # @param track_details Track Details
    # @param [Hash] opts the optional parameters
    # @return [TrackResponse]
    def contact_track_post(api_key, team_id, email, track_details, opts = {})
      data, _status_code, _headers = contact_track_post_with_http_info(api_key, team_id, email, track_details, opts)
      return data
    end

    # Add tracking info using tags to a contact
    # 
    # @param api_key 
    # @param team_id 
    # @param email 
    # @param track_details Track Details
    # @param [Hash] opts the optional parameters
    # @return [Array<(TrackResponse, Fixnum, Hash)>] TrackResponse data, response status code and response headers
    def contact_track_post_with_http_info(api_key, team_id, email, track_details, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactApi.contact_track_post ..."
      end
      # verify the required parameter 'api_key' is set
      fail ArgumentError, "Missing the required parameter 'api_key' when calling ContactApi.contact_track_post" if api_key.nil?
      # verify the required parameter 'team_id' is set
      fail ArgumentError, "Missing the required parameter 'team_id' when calling ContactApi.contact_track_post" if team_id.nil?
      # verify the required parameter 'email' is set
      fail ArgumentError, "Missing the required parameter 'email' when calling ContactApi.contact_track_post" if email.nil?
      # verify the required parameter 'track_details' is set
      fail ArgumentError, "Missing the required parameter 'track_details' when calling ContactApi.contact_track_post" if track_details.nil?
      # resource path
      local_var_path = "/contact/track".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'team_id'] = team_id
      query_params[:'email'] = email

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'api_key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(track_details)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactApi#contact_track_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
